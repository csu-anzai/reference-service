apply plugin: 'scala'

repositories {
    maven { url 'http://repo.spring.io/milestone' }
    jcenter()
}

dependencies {
    compile "ch.qos.logback:logback-classic:1.2.3"
    testCompile "org.springframework.boot:spring-boot:${spring_boot_version}"
    testCompile "io.gatling.highcharts:gatling-charts-highcharts:2.2.3"
}

sourceSets {
    test {
        scala {
            srcDirs = ['src/test/gatling/user-files/simulations']
            output.dir(file('build/test-classes'))
        }
    }
}

task manifestJar(dependsOn: 'compileTestScala', type: Jar) {
    archiveName 'gatlingBooter.jar'
    doFirst {
        manifest {
            // uri is just needed for Windows-compatibility
            attributes 'Class-Path': configurations.testCompile.files.collect {
                project.uri(it)
            }.join(' ')
        }
    }
}

task gatlingRun(dependsOn: 'manifestJar') {
    group = 'gatling'
    description = 'Run a single Gatling simulation. You must write the name of your Gatling simulation.'

    doLast {
        String gatlingSimulationClass = "WriteTheNameOfYourGatlingSimulation"
        if (project.hasProperty('gatlingSimulationClass')) {
            gatlingSimulationClass = project.property('gatlingSimulationClass')
        }

        createGatlingRunTask(gatlingSimulationClass).dependsOn('manifestJar').execute()
    }
}

task gatlingRunAll(dependsOn: 'manifestJar') {
    group = 'gatling'
    description = 'Run all available Gatling simulations.'

    doLast {
        FileTree tree = fileTree(dir: './src/test/gatling/user-files/simulations')
        tree.include '**/*.scala'
        tree.each { File file ->
            def simulationClassName = file.name.replaceFirst(".scala", "")
            println simulationClassName
            createGatlingRunTask(simulationClassName).dependsOn('manifestJar').execute()
        }
    }
}

def createGatlingRunTask(def gatlingSimulationClassName) {
    return tasks.create("gatlingRun${gatlingSimulationClassName}", JavaExec) {

        standardInput = System.in

        final def sourceSet = sourceSets.test

        String gatlingDataFolder = "$project.rootDir.absolutePath/src/test/gatling/user-files/data"
        String gatlingReportsFolder = "$project.buildDir.absolutePath/reports/gatling"
        String gatlingBodiesFolder = "$project.rootDir.absolutePath/src/test/gatling/user-files/bodies"
        String gatlingSimulationsFolder = "$project.rootDir.absolutePath/src/test/gatling/user-files/simulations"

        classpath sourceSet.output + files(manifestJar.archivePath) + files("src/test/gatling/conf")

        main = "io.gatling.app.Gatling"

        environment GATLING_HOME: ''

        args '-df', gatlingDataFolder
        args '-rf', gatlingReportsFolder
        args '-bdf', gatlingBodiesFolder
        args '-sf', gatlingSimulationsFolder
        args '-m'
        args '-s', gatlingSimulationClassName
    }
}

compileJava.enabled false
compileTestJava.enabled false
