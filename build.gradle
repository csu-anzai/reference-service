buildscript {
    repositories {
        jcenter()
        maven { url "http://repo.spring.io/plugins-release" }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://dl.bintray.com/jhipster/maven" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${spring_boot_version}"
        classpath "io.spring.gradle:propdeps-plugin:0.0.10.RELEASE"
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.17"
        //jhipster-needle-gradle-buildscript-dependency - JHipster will add additional gradle build script plugins here
    }
}

plugins {
    id 'org.sonarqube' version '2.6.1'
    id "net.ltgt.apt-idea" version "0.13"
    id "io.spring.dependency-management" version "1.0.4.RELEASE"
    id 'com.avast.gradle.docker-compose' version '0.7.1'
    id 'io.github.http-builder-ng.http-plugin' version '0.1.1'
    //jhipster-needle-gradle-plugins - JHipster will add additional gradle plugins here
}


apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply from: 'gradle/liquibase.gradle'
apply from: 'gradle/mapstruct.gradle'
apply from: 'gradle/docker.gradle'
apply from: 'gradle/docker-compose.gradle'
apply from: 'gradle/maven-publish.gradle'

allprojects {
    group = 'ch.admin.seco.service.reference'
    version = version != 'unspecified' ? version : '1.0.0-SNAPSHOT'

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'propdeps'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    configurations {
        providedRuntime
        compile.exclude module: "spring-boot-starter-tomcat"
    }

    repositories {
        maven { url 'https://repo.spring.io/release' }
        maven { url 'https://repo.spring.io/milestone' }
        jcenter()
        maven { url 'https://alvch.jfrog.io/alvch/libs-releases' }
        maven { url 'https://dl.bintray.com/jhipster/maven' }
    }

    dependencyManagement {
        dependencies {
            dependency 'com.google.guava:guava:23.5-jre'
            dependency 'org.codehaus.jackson:jackson-core-asl:1.9.13'
            dependency 'com.mattbertolini:liquibase-slf4j:2.0.0'
            dependency 'com.ryantenney.metrics:metrics-spring:3.1.3'
            dependency "io.github.jhipster:jhipster:${jhipster_dependencies_version}"
            dependency 'io.jsonwebtoken:jjwt:0.9.0'
            dependency 'io.springfox:springfox-bean-validators:2.8.0'
            dependency 'io.springfox:springfox-swagger2:2.8.0'
            dependency 'io.springfox:springfox-swagger-ui:2.8.0'
            dependency 'net.logstash.logback:logstash-logback-encoder:4.11'
            dependency 'org.hibernate.validator:hibernate-validator:6.0.7.Final'
            dependency 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final'
            dependency 'org.zalando:problem-spring-web:0.22.1'
            dependency 'com.googlecode.libphonenumber:libphonenumber:8.9.2'
            dependency 'junit:junit:4.12'
        }
        imports {
            mavenBom 'org.springframework.boot:spring-boot-dependencies:2.0.0.RELEASE'
            mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Finchley.M7'
        }
    }

    plugins.withType(org.springframework.boot.gradle.plugin.SpringBootPlugin).whenPluginAdded {
        defaultTasks 'bootRun'

        springBoot {
            buildInfo({
                properties {
                    additional = [
                        'number': System.env.TRAVIS_JOB_NUMBER ?: 'n/a'
                    ]
                }
            })
        }

        task stage(dependsOn: 'bootJar') {
        }

        compileJava.dependsOn processResources
        processResources.dependsOn cleanResources, bootBuildInfo
        bootBuildInfo.mustRunAfter cleanResources
    }

    task testReport(type: TestReport) {
        destinationDir = file("$buildDir/reports/tests")
        reportOn test
    }

    apply from: "${rootProject.rootDir}/gradle/checkstyle.gradle"
    apply from: "${rootProject.rootDir}/gradle/sonar.gradle"
    //jhipster-needle-gradle-apply-from - JHipster will add additional gradle scripts to be applied here

    task cleanResources(type: Delete) {
        delete 'build/resources'
    }
}

dependencies {
    compile project(':application')
    compile "javax.xml.bind:jaxb-api"
    compile "org.springframework.boot:spring-boot-starter-cache"
    compile "org.springframework.boot:spring-boot-starter-webflux"
    compile "io.github.jhipster:jhipster"
    compile "io.dropwizard.metrics:metrics-core"
    compile "io.dropwizard.metrics:metrics-json"
    compile "io.dropwizard.metrics:metrics-jvm"
    compile "io.dropwizard.metrics:metrics-servlet"
    compile "io.dropwizard.metrics:metrics-servlets"
    compile "net.logstash.logback:logstash-logback-encoder"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-json-org"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hppc"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5"
    compile "com.fasterxml.jackson.core:jackson-annotations"
    compile "com.fasterxml.jackson.core:jackson-databind"
    compile "com.fasterxml.jackson.module:jackson-module-afterburner"
    compile "com.ryantenney.metrics:metrics-spring"
    compile "com.hazelcast:hazelcast"
    compile "com.hazelcast:hazelcast-hibernate52"
    compile "com.hazelcast:hazelcast-spring"
    compile "javax.cache:cache-api"
    compile "org.hibernate:hibernate-core"
    compile "com.zaxxer:HikariCP"
    compile "org.apache.commons:commons-lang3"
//    compile "commons-io:commons-io"
    compile "javax.transaction:javax.transaction-api"
    compile "org.hibernate:hibernate-entitymanager"
    compile "org.hibernate:hibernate-envers"
    compile "org.hibernate.validator:hibernate-validator"
    compile "org.liquibase:liquibase-core"
    compile "com.mattbertolini:liquibase-slf4j"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.springframework.boot:spring-boot-loader-tools"
    compile "org.springframework.boot:spring-boot-starter-mail"
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-aop"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.boot:spring-boot-starter-data-elasticsearch"
    // needed to get around elasticsearch stacktrace about jna not found
    // https://github.com/elastic/elasticsearch/issues/13245
    compile "net.java.dev.jna:jna"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: 'spring-boot-starter-tomcat'
    }
    compile "org.springframework.boot:spring-boot-starter-undertow"
    compile "org.springframework.boot:spring-boot-starter-thymeleaf"
    compile "org.zalando:problem-spring-web"
    compile "org.springframework.cloud:spring-cloud-starter"
    compile "org.springframework.cloud:spring-cloud-starter-netflix-ribbon"
    compile "org.springframework.cloud:spring-cloud-starter-netflix-hystrix"
    compile "org.springframework.retry:spring-retry"
    compile "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client"
    compile "org.springframework.cloud:spring-cloud-starter-config"
    compile "org.springframework.cloud:spring-cloud-starter-openfeign"
    compile "org.springframework.cloud:spring-cloud-spring-service-connector"
    compile 'org.springframework.cloud:spring-cloud-starter-stream-kafka'

    compile "org.springframework:spring-context-support"
    compile "org.springframework.security:spring-security-config"
    compile "org.springframework.security:spring-security-data"
    compile "org.springframework.security:spring-security-web"
    compile "io.jsonwebtoken:jjwt"
    compile("io.springfox:springfox-swagger2") {
        exclude module: 'mapstruct'
    }
    compile "io.springfox:springfox-bean-validators"
    compile "org.postgresql:postgresql"
    compile "org.mapstruct:mapstruct-jdk8:${mapstruct_version}"

    testCompile "com.jayway.jsonpath:json-path"
    testCompile("org.springframework.boot:spring-boot-starter-test") {
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
    testCompile "org.springframework.security:spring-security-test"
    testCompile "org.springframework.boot:spring-boot-test"
    testCompile "org.assertj:assertj-core"
    testCompile "junit:junit"
    testCompile "org.mockito:mockito-core"
    testCompile "com.mattbertolini:liquibase-slf4j"
    testCompile "org.hamcrest:hamcrest-library"
    testCompile "com.h2database:h2"
    testCompile 'org.springframework.cloud:spring-cloud-stream-test-support'

    optional("org.springframework.boot:spring-boot-configuration-processor") {
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
    //jhipster-needle-gradle-dependency - JHipster will add additional dependencies here
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.6'
}
