apply plugin: "org.springframework.boot"
apply from: "${rootProject.rootDir}/gradle/maven-publish.gradle"
apply from: "${rootProject.rootDir}/gradle/docker-compose.gradle"

dependencies {
    // spring boot dependencies
    compile 'org.springframework.boot:spring-boot-starter-batch'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.boot:spring-boot-starter-logging'

    // Feign dependencies
    compile "org.springframework.cloud:spring-cloud-starter-openfeign"
    compile 'io.github.openfeign:feign-httpclient'
    compile 'org.springframework.cloud:spring-cloud-security'
    compile 'org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure'

    // spring cloud dependencies
    compile "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client"
    compile "org.springframework.cloud:spring-cloud-starter-config"
    compile 'org.springframework.cloud:spring-cloud-starter-task'

    // other dependencies
    compile 'com.googlecode.libphonenumber:libphonenumber'
    compile "org.hibernate.validator:hibernate-validator"
    compile "io.github.jhipster:jhipster-framework"

    runtime "com.zaxxer:HikariCP"
    runtime "com.oracle:ojdbc7"
    runtime "org.postgresql:postgresql"

    testRuntime 'com.h2database:h2'
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    testCompile group: 'org.springframework.batch', name: 'spring-batch-test'
}

apply plugin: 'io.github.http-builder-ng.http-plugin'
import io.github.httpbuilderng.http.HttpTask

task registerApps(type: HttpTask) {
    group 'spring data flow'
    mustRunAfter 'publish'
    config {
        request.uri = 'http://dev.job-room.ch:9393'
        request.contentType = 'application/x-www-form-urlencoded'
    }
    post {
        request.uri.path = '/apps/task/jobcenterImport'
        request.body = "force=true&uri=maven://${project.group}:${project.name}:${version}".toString()
    }
}

bootJar {
}

springBoot {
    buildInfo {
    }
}
